// Shlomi Ben-Shushan 311408264
// Yiftach Neuman 208305359

#include "krembot.ino.h"
#include <string>
#include <random>

using namespace std;

SandTimer timer;
SandTimer dist_timer;
default_random_engine generator;
int8_t rot_speed = 0;
float stop_dist = 15;

/*
 * Setup Function:
 * Initializes Krembot and turn on green LED light.
 */
void ex2_controller::setup() {
    krembot.setup();
    krembot.Led.write(0,255,0);
    dist_timer.setPeriod(5000);
    dist_timer.start();
}

/*
 * Loop Function:
 * Command the robot to drive at full speed until one of its front bumpers
 * pressed, and then turn in a random angular speed (and direction) for a random
 * time (up to 3 seconds) and drive again.
 */
void ex2_controller::loop() {
    krembot.loop();
    if (dist_timer.finished()) {
        uniform_int_distribution<int> dist_distribution(1,20);
        stop_dist = dist_distribution(generator);
        dist_timer.setPeriod(5000);
        dist_timer.start();
        std::cout << "stop_dist = " << stop_dist << std::endl;
    }
    if (timer.finished()) {
        BumpersRes bumpers = krembot.Bumpers.read();
        bool bumped = bumpers.front == BumperState::PRESSED ||
                      bumpers.front_left == BumperState::PRESSED ||
                      bumpers.front_right == BumperState::PRESSED;
        if (!bumped) {
            float dist_front = krembot.RgbaFront.readRGBA().Distance;
            float dist_front_left = krembot.RgbaFrontLeft.readRGBA().Distance;
            float dist_front_right = krembot.RgbaFrontRight.readRGBA().Distance;
            if (dist_front > stop_dist &&
                dist_front_left > stop_dist &&
                dist_front_right > stop_dist) {
                krembot.Base.drive(100, 0);
                krembot.Led.write(0,255,0);
            } else {
                if (dist_front_left < dist_front_right) {
                    krembot.Base.drive(50, -100);
                    krembot.Led.write(255,165,0);
                } else {
                    krembot.Base.drive(50, 100);
                    krembot.Led.write(255,165,0);
                }
            }
        } else {
            krembot.Base.stop();
            uniform_int_distribution<int> speed_distribution(-100,100);
            rot_speed = speed_distribution(generator);
            uniform_int_distribution<int> time_distribution(1,3000);
            millis_time_t rot_time = time_distribution(generator);
            timer.setPeriod(rot_time);
            timer.start();
            krembot.Led.write(255,0,0);
        }
    } else {
        krembot.Base.drive(0, rot_speed);
        krembot.Led.write(255,0,0);
    }
}