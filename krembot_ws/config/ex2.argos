<!-- Shlomi Ben-Shushan & Yiftach Neuman -->

<?xml version="1.0" ?>
<argos-configuration>

  <!-- ************************* -->
  <!-- * General configuration * -->
  <!-- ************************* -->
  <framework>
    <!--
        System configuration:
        - threads: the number of slave threads to parallelize the
          computation. For less than 100 robots thread management is not
          beneficial, so here we set it to 0. When set to 0, it means that
          the computation is not parallelized: the main thread does
          everything.
    -->
    <system threads="0" />
    <!--
        Experiment configuration:
        - length: total experiment time in seconds (0 means the experiment
          has no time limit)
        - ticks_per_second: number of ticks per second (int value)
        - random_seed: seed of the main random number generator. If unset
          or set to zero, this value is taken from the clock and a warning
          message is displayed.
    -->
    <experiment length="0"
                ticks_per_second="10"
                random_seed="2" />
  </framework>

  <!-- *************** -->
  <!-- * Controllers * -->
  <!-- *************** -->
  <controllers>

    <!-- 
         Here you list the controllers to be used in the experiment.
         The XML tag is set by the REGISTER_CONTROLLER(class, "tag") macro.
         You find it in the .cpp file of your controller.
         For this example, the macro is called in
         controllers/footbot_diffusion.cpp:100.
    -->

    <!--
        The attributes are:
        - id: a unique a identifier for this controller, to be used in the
          subsequent <arena> section to say which robots use which
          controller
        - library: the path to the compiled library containing you
          controller.
    -->
    <ex2_controller id="ex2"
                                  library="./build/controllers/ex2/libex2.so">
      <!--
          The <actuators> section contains a list of the actuators used by
          this controller.
          If you forget a to mention an actuator here and then request it
          in the controller, an error occurs.
          For a list of the possible actuators, type at the command prompt:
          $ launch_argos -q actuators

          Multiple implementations of an actuator are possible. To
          identify which one you want to use, pass it in the
          'implementation' attribute below. When you type the 'argos3 -q'
          command, the implementation is in the square brackets following
          the name of the device:

          $ argos3 -q actuators
          ...
          footbot_wheels [default]
          ...
      -->
      <actuators>
        <differential_steering implementation="default" />
	<leds                  implementation="default" medium="leds" />
      </actuators>
      <!--
          The <sensors> section contains a list of the sensors used by
          this controller.
          If you forget a to mention a sensor here and then request it in
          the controller, an error occurs.
          For a list of the possible sensors, type at the command prompt:
          $ argos3 -q sensors
      -->
      <sensors>
        <footbot_proximity implementation="default" show_rays="false" />
        <footbot_light                       implementation="rot_z_only" show_rays="false" />
	<footbot_imu                       implementation="rpy" />
        <colored_blob_omnidirectional_camera implementation="rot_z_only" medium="leds" show_rays="true" />
      </sensors>
      <!--
          The <params> section is passed as-is to the controller's Init()
          function.
          The user, writing the controller, defines how it is organized.
          To understand what these parameters are for, check the
          controller's header file in
          controllers/program_template_controller/program_template_controller.h.
      -->
      <params alpha="7.5" delta="0.1" velocity="5" />
    </ex2_controller>

  </controllers>

  <!-- ****************** -->
    <!-- * Loop functions * -->
    <!-- ****************** -->
    <loop_functions library="build/loop_functions/trajectory_loop_functions/libtrajectory_loop_functions"
                    label="trajectory_loop_functions" />


  <!-- *********************** -->
    <!-- * Arena configuration * -->
    <!-- *********************** -->
    <arena size="8, 8, 1" center="0,0,0.5">

      <box id="wall_north" size="8,0.1,0.5" movable="false">
        <body position="0,4,0" orientation="0,0,0" />
      </box>
      <box id="wall_south" size="8,0.1,0.5" movable="false">
        <body position="0,-4,0" orientation="0,0,0" />
      </box>
      <box id="wall_east" size="0.1,8,0.5" movable="false">
        <body position="4,0,0" orientation="0,0,0" />
      </box>
      <box id="wall_west" size="0.1,8,0.5" movable="false">
        <body position="-4,0,0" orientation="0,0,0" />
      </box>


      <!--
          We distribute 5 boxes uniformly in position and rotation around Z.
      -->
      <distribute>
        <position method="uniform" min="-4,-4,0" max="4,4,0" />
        <orientation method="uniform" min="0,0,0" max="360,0,0" />
        <entity quantity="5" max_trials="100">
          <box id="b" size="0.3,0.3,0.5" movable="false" />
        </entity>
      </distribute>

      <!--
              We distribute cylinders uniformly in position and with
              constant rotation (rotating a cylinder around Z does not
              matter)
          -->
          <distribute>
            <position method="uniform" min="-3.5,-3.5,0" max="3.5,3.5,0" />
            <orientation method="constant" values="0,0,0" />
            <entity quantity="3" max_trials="100">
              <cylinder id="c" height="0.5" radius="0.15" movable="false" />
            </entity>
          </distribute>


    <distribute>
          <position method="uniform" min="-3.5,-3.5,0" max="3.5,3.5,0" />
          <orientation method="gaussian" mean="0,0,0" std_dev="360,0,0" />
          <entity quantity="1" max_trials="100">
            <foot-bot id="krembot">
              <controller config="ex2" />
            </foot-bot>
          </entity>
        </distribute>

  </arena>

  <!-- ******************* -->
  <!-- * Physics engines * -->
  <!-- ******************* -->
  <!--
      In ARGoS, multiple physics engines can run at the same time.
      In this section you say which engines to use for the experiment.
      To know which engines are available, type at the command prompt:
      
      $ argos3 -q physics_engines
  -->
  <physics_engines>
    <!--
        Use a 2D dynamics engine.
    -->
    <dynamics2d id="dyn2d" />
  </physics_engines>

  <!-- ********* -->
  <!-- * Media * -->
  <!-- ********* -->
  <!--
      Here you specify the media in use. Media allow robots to communicate.
      In this experiment, robots do not communicate, so no media are
      specified.
      To know which media are available, type at the command prompt:

      $ argos3 -q media
  -->

  <media>
    <led id="leds" />
  </media>


  <!-- ****************** -->
  <!-- * Visualization * -->
  <!-- ****************** -->
  <!--
      Here you specify which visualization to use.
      You can also not specify a visualization at all, in which case ARGoS
      will run without showing anything.
      Having no visualization is useful when you run ARGoS in a batch of
      experiments to collect statistics.
      To know which visualizations are available, type at the command
      prompt:

      $ argos3 -q visualizations
  -->
  <visualization>
    <!--
        This shows how to add customized drawing in the world
        using the qt user functions.
        Check 'argos3 -q qt-opengl' for more help.
    -->
    <qt-opengl>
      <user_functions library="build/loop_functions/trajectory_loop_functions/libtrajectory_loop_functions"
                      label="trajectory_qtuser_functions" />
      <camera>
        <placements>
            <placement index="0" position="-5,0,20" look_at="0,0,0" up="1,0,0" lens_focal_length="65" />
        </placements>
      </camera>
    </qt-opengl>
  </visualization>

</argos-configuration>
